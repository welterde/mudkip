
Document version: 0.1

This file provides an overview of the Mudkip game structure. It is intended to
be used as a guide on how to design the data model for the particular datastore
we implement. We will describe the individual types of objects we use in the
game and how they relate to eachother.

================================================================================
 IMPORTANT
================================================================================

* Unless otherwise noted, all numeric values are encoded in LITTLE ENDIAN order.

* All strings are UTF-8 encoded.

* Unless otherwise noted, all string size restrictions are in UNICODE CODE
  POINTS, not in bytes. The reason is that we require some kind of limit for
  easier storage, but we do not want to put undue restrictions on users of
  multi-byte languages. So a string of 255 runes max, can contain equally as
  much character content whether we use a multibyte character set or plain old
  ASCII. In practice this means that the size of a string in bytes is variable
  and at most 4 times larger than the actual number of unicode characters.

================================================================================
 WORLD
================================================================================

Each datastore should store 1 WorldInfo structure. It contains some general
information about the world associated with the game that is hosted by a server.

 ID
   This is a 16 bit unsigned integer which uniquely identifies this particular
   world. We can not have more than 1 of this ID in the datastore.

 NAME
   A UTF8 encoded string which names the world. It is at most 256 unicode
   runes in length. Newlines (\r and \n) are not allowed in this value.

 DESCRIPTION
   A UTF8 encoded string which describes the world. It is at most 4096 unicode
   runes in length. Newlines (\r and \n) are allowed in this value.

 CREATED
   A 64 bit unix timestamp representing the date/time at which this world was
   first created.

 MOTD:
   A UTF8 encoded string which may contain some news related to the game. It is
   at most 4096 unicode runes in length. Newlines (\r and \n) are allowed in
   this value. This value can be null.

 DEFAULTZONE
   This value will store the default zone, all guests and first-time users will
   start int. Stored as a valid 16 bit unsigned integer object ID.

 ALLOWREGISTRATION
   This is a simple boolean value indicating if new users are allowed to
   register new accounts through the server.

================================================================================
 USERS
================================================================================

Obviously we need to support some form of user registration/management.
The mudkip client/server model supplies a set of message types for this
purpose. Anyone connecting to a mudkip server is provided with the option to
either register as a new player, or resume an existing account by supplying
its username and password. This means we have to store the users somewhere.

There are some limitations to the type of data a user can supply in his/her
registration:

  USERNAME
    A UTF8 encoded string with the user's account name. It is at most 30 unicode
    runes in length. Newlines (\r and \n) are not allowed in this value.

  PASSWORD
    This should be at least a 328 bit hash of the original password. We do not
    want to store the password itself.

  REGISTERED
    This is the date/time at which the user registered as an unsigned 64 bit
    unix time stamp.

  ZONE
    This value will store the last zone the user was in. As a valid 16 bit
    unsigned integer object ID.

  CHARACTER
    This is the id of the character associated with this user, eg: the player's
    toon.

