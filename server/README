
This is the mudkip server. It runs based on some profile settings you supply
through an ini file.

Invocation is simple:

	$ ./server path/to/config.ini

If the config file does not exist, the server will create a standard template
for you in the specified location and exit. You can then edit it and restart the
server.

A template config file looks like this:

---------------------[ start of file ]------------------------------------------
[data]
; Any values needed to create a valid connection to the db of your choice,
; should be added in this section as key/value pairs. For example:
; 
;   user = bob
;   pass = 1234
;   dbname = mudkipz
;   dbhost = 127.0.0.1
; 
; Refer to the README of the individual db driver for the required keys.

[net]
; Address should be in the format ip:port. It can be in IPv4 and IPv6 format.
; IPv6 address should be encased in brackets. For example:
;
;   address = 127.0.0.1:54321
;   address = [::1]:54321
;   address = :54321
;
; servercert and serverkey must be set when secure = true
serverkey = /path/to/key.pem
servercert = /path/to/cert.pem
cookiesalt = 47297sf789s6df2u38927r0+_)09823%$7232089>?<=+32@@1
secure = false
clienttimeout = 2
address = 
---------------------[ end of file ]--------------------------------------------
An example of a standard config file can be viewed in mudkip/testdata/template.ini

The server presents its page content through the use of templates. The page to
display is determined based on the url. We do not refer to physical pages
however*. The urls refer to Service commands defined explicitely in the server
code. The handlers for these 'urls' determine which template is actually 
rendered and displayed.

*) The server does support serving of static files. We use this feature to serve
css stylesheets, images and javascript documents when needed. In principle, any
type of file can be accessed directly, except .ghtml files. These are the 
templates that should first be parsed and executed by the server. We therefor
explicitely deny direct access to these files. We've done this mostly out of
security concerns.

By seeing the unprocessed content of a template, a user can puzzle together the
internal structure of the Go server. This will not be a problem at this point,
but we just prefer to stay on the side of caution. If the user has no business
seeing some information, then simply don't share it.

